name: 1.0.$(Rev:r)

# #########################

#trigger:
#  - developer

trigger:
    branches:
        include:
            - master

            - feature/* # Esto es un comodin, que se ejecuten todas las ramas que están dentro de esta carpeta.

        exclude:
            - developer #queremos que esta rama no se incluya ( a lo mejor tiene otra pipeline diferente).

# #########################
variables:
    frase: hello
    name: devOps
# #########################
pool:
    vmImage: ubuntu-latest #Hosted agent
# #########################

jobs:
    - job: MyJob #nombre del job
      displayName: mi primer job #el nombre que saldrá en el pipeline
      continueOnError: true # Si continua o no cuando ocurra un error, pero que nos notifique.
      dependsOn: A
      container: NombreContenedor #Si utilizará un contenedor de docker o cualquier otro aqui va el nombre
      pool: nombreDePool #Si queremos que el job utilice un pool en concreto solo para está sección, lo declaramos aqui.
      workspace:
          clean: outputs # que limpie la salida o antes de ejecutar
      steps: #Aquí especificamos los pasos que va a ejecutar un job
          - script: echo My primer job

    - job: A
      steps:
          - script: echo 'job A'

    - job: B
      dependsOn: A #Cuando se ejecute el job A que recién se ejecute el B
      steps:
          - script: echo 'job B'

    - job: c
      dependsOn: B #Cuando se ejecute el job B que recién se ejecute el C
      steps:
          - script: echo 'job C'

    - job: D
      dependsOn: #Depende de dos job, si hay un fallo en algunos estonces este no se ejecuta.
          - B
          - C
      steps:
          - script: echo 'job D'

    - job: trabajo1
      steps:
          - script: echo "$(frase), $(name)"

    - job: trabajo2
      steps:
          - script: echo "$(frase), $(name)"

#################################
#Steps: son agrupadores de trabajos se ejcutan de forma secuencial y lo usamos si es que queremos que realice más de una cosa 
#al mismo tiempo. 

stages:
- stage: Build #este stage lo que hace es compilar
	jobs:
	- job: testOnWindows #contiene un job
		steps:
		- script: echo hola mundo 1 # esto mostrará por pantalla

- stage: Test #cuando termine le primer stage comenzará esta.
	jobs:
	- job: testOnWindows
		steps:
		- script: compilando

- stage: Test #cuando termine le primer stage comenzará esta.
	jobs:
	- job: Deploy
		steps:
		- script: Deploy

###############################3
# STEPS
stages: #ETAPA
- stage: Build
	jobs: #TRABAJOS
	- job: dev
		steps: #ESTOS SON LOS PASOS DENTRO DEL TRABAJO (Se ejecuta en orden).
		- script: Hola mundo
		- bash: |
			echo "This multiline script."
		- pwsh: | #powershell
			Write-Host "This multiline script."


###### CONDICIONES

jobs:
- job: A
  steps:
  - script: exit 1

- job: B
  dependsOn: A
  condition: failed()
  steps:
  - script: echo esto se ejecutará cuando A falle

- job: C
  dependsOn:
  - A
  - B
  condition: succeeded('B')
  steps:
  - script: echo esto se ejecutará cuando B se ejecute y tenga éxito



# - El nombre puede ir vacio y lo que va dentro del $ es una palabra reservada que hace referencia
# a una variable de entorno que está dentro de nuestro azure devOps.

# El triger es el disparador que indica cuando se va a lanzar si se ejecutan cambios en esa rama.
# Podemos hacer de diferentes maneras, que incluya o excluya algunas ramas.

# También podemos definir variables

# Un pool es la imagen

# Cada job son tareas unitarias que realizan tareas concretas.
# Si no marcamos dependencias para los jobs se ejecutaran al mismo tiempo!

trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
  - repository: Report_Angular 
    type: git  
    name: front-angular 
    trigger:  
      branches:
        include:
        - dev
        - qas
        - main
  
  - repository: RepositorioDeveloper
    type: git
    name: Practicando001/RepoDeveloper
    endpoint: azureSubscription
    ref: refs/heads/dev
    
 
variables:
  - template: template/variables.yml
  - group: Build
  - group: SonarCloud
  - group: Deploy
  

stages:
  - stage: BUILD
    jobs: 
      - job: Build
        steps:
          - template: templates/pipelinePrueba.yml@RepositorioDeveloper

          - checkout: git://PY-DEVOPS-TRAINING/front-angular@refs/heads/dev
          - task: NodeTool@0
            inputs:
              versionSpec: '16.14.0'
            displayName: 'Install Node.js'
          - template: template/base.yml
          - template: template/steps_test.yml
          - template: template/task_copy.yml
          - script: |
              ng build --prod
              ls
              zip -rq test.zip dist
              ls
              echo "REFERENCIA:" $(ref)
              echo "Rama Dev:" $(isDev)
              echo "Rama Main:" $(isMain)
            displayName: 'node_modules, dist y test.zip'
          - task: PublishBuildArtifacts@1
            displayName: 'Publicacion de mi artefacto'
            inputs:
              PathtoPublish: test.zip
              ArtifactName: 'Build-Angular'
              publishLocation: 'Container'
            condition: succeededOrFailed()
          
  - stage: SONARCLOUD
    jobs: 
      - job: SonarCloud
        # dependsOn: Build
        steps:
          - script:
              #echo $(sonarC)
              echo Hola desde SonarCloud
          
          - task: DownloadBuildArtifacts@0
            displayName: 'Descargando el artefacto'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'Build-Angular'
              #downloadPath: test.zip
              downloadPath: .
          
          - script: |
              ls
              echo -------------------------
              unzip Build-Angular/test.zip
              ls


  - stage: DEPLOYMENT
    jobs: 
      - job: Deployment
        # dependsOn: SonarCloud
        steps:
          - script: echo Hola desde deploy 
          #- script: echo $(deploy)


  --------------------------
trigger: none
  # branches:
  #   include:
  #     - master
  #     - feature/* # Escuchará a todas las ramas dentro de está carpeta.
  #   exclude:
  #     - feature/old* # No se escuchará la rama que empiecen con old*
  # paths:
  #   exclude:
  #   - README.md # Que cuando haya cambios no escuche a este archivo

variables:
  # - name: globalVariable
  #   value: "global Variable desde la raiz"
  # - name: overrideGlobalVariable
  #   value: "Root"
  # - group: Test

  #EXPRESIONES
  staticVar: 'Mi valor' #Variable estatica
  compileVar: ${{ variables.staticVar }} #expresión en tiempo de compilación
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')] #expresion de ejecucion
  #LITERALES
  varBoolean: ${{ true }}
  varNumber: ${{ -1.2 }}
  varString: ${{ 'a b c'}}
  varVersion: ${{ 1.2.3}}
  #CUERDA
  # myKey: |
  #   Neisser
  #   Moreno
  #   Sanchez

pool:
  # vmImage: ubuntu-latest
  vmImage: windows-latest

stages:
- stage:
  displayName: "Stage 1"
  variables:
    stageVariable: "Mi variable en Stage"
    # overrideGlobalVariable: "Stage - Chancando la variable de global raiz"
    globalVariable: "Stage - Chancando la variable de global raiz"

  jobs:
    - job: Developer
      variables:
        - name: jobVariable
          value: "Variable de mi Job"

      steps:
      - script: echo $(ValorOne)
        displayName: 'Testeando'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "globalVariable" $(globalVariable)

            echo "Ruta local del agente:" $(Agent.BuildDirectory)
            echo "Directorio donde se instala:" $(Agente.HomeDirectory)
            echo "DNI del agente" $(Agente.Id)
            echo "Nombre de la maquina donde se instala el agente:" $(Agent.MachineName)

            echo "Nombre de mi repositorio: " $(Build.Repository.Name)
            echo "El ID del registro de la compilación completa: "$(Build.BuildId)
            echo "Número de ejecución: " $(Build.BuildNumber)
            echo "Identificador del repositorio:" $(Build.Repository.ID)
            echo "Tipo de repositorio: " $(Build.Repository.Provider)
            echo "Rama del repositorio: " $(Build.SourceBranch)

            echo "Espacio de trabajo del pipeline:" $(Pipeline.Workspace)

            echo "Nombre de mi org. en azureDevOps: " $(System.CollectionUri)
            echo "Ruta local del agente dond se descarga los archivos" $(System.DefaultWorkingDirectory)
            echo "ID del pipeline de compilación: " $(System.DefinitionId)
            
            - script: |
            echo ${{variables.staticVar}}
            echo $(compileVar)
            echo $(isMain)
            echo LITERALES
            echo $(varBoolean)
            echo $(varNumber)
            echo $(varString)
            echo $(varVersion)
            
  
              -----------------------------------------
trigger: none
  # branches:
  #   include:
  #     - master
  #     - feature/* # Escuchará a todas las ramas dentro de está carpeta.
  #   exclude:
  #     - feature/old* # No se escuchará la rama que empiecen con old*
  # paths:
  #   exclude:
  #   - README.md # Que cuando haya cambios no escuche a este archivo

variables:
  # - name: globalVariable
  #   value: "global Variable desde la raiz"
  # - name: overrideGlobalVariable
  #   value: "Root"
  # - group: Test

  #EXPRESIONES
  staticVar: 'Mi valor' #Variable estatica
  compileVar: ${{ variables.staticVar }} #expresión en tiempo de compilación
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')] #expresion de ejecucion
  #LITERALES
  varBoolean: ${{ true }}
  varNumber: ${{ -1.2 }}
  varString: ${{ 'a b c'}}
  varVersion: ${{ 1.2.3}}
  #CUERDA
  # myKey: |
  #   Neisser
  #   Moreno
  #   Sanchez

pool:
  # vmImage: ubuntu-latest
  vmImage: windows-latest

stages:
- stage:
  displayName: "Stage 1"
  variables:
    stageVariable: "Mi variable en Stage"
    # overrideGlobalVariable: "Stage - Chancando la variable de global raiz"
    globalVariable: "Stage - Chancando la variable de global raiz"

  jobs:
    - job: Developer
      variables:
        - name: jobVariable
          value: "Variable de mi Job"

      steps:
      - script: echo $(ValorOne)
        displayName: 'Testeando'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "globalVariable" $(globalVariable)

            echo "Ruta local del agente:" $(Agent.BuildDirectory)
            echo "Directorio donde se instala:" $(Agente.HomeDirectory)
            echo "DNI del agente" $(Agente.Id)
            echo "Nombre de la maquina donde se instala el agente:" $(Agent.MachineName)

            echo "Nombre de mi repositorio: " $(Build.Repository.Name)
            echo "El ID del registro de la compilación completa: "$(Build.BuildId)
            echo "Número de ejecución: " $(Build.BuildNumber)
            echo "Identificador del repositorio:" $(Build.Repository.ID)
            echo "Tipo de repositorio: " $(Build.Repository.Provider)
            echo "Rama del repositorio: " $(Build.SourceBranch)

            echo "Espacio de trabajo del pipeline:" $(Pipeline.Workspace)

            echo "Nombre de mi org. en azureDevOps: " $(System.CollectionUri)
            echo "Ruta local del agente dond se descarga los archivos" $(System.DefaultWorkingDirectory)
            echo "ID del pipeline de compilación: " $(System.DefinitionId)
            
            - script: |
            echo ${{variables.staticVar}}
            echo $(compileVar)
            echo $(isMain)
            echo LITERALES
            echo $(varBoolean)
            echo $(varNumber)
            echo $(varString)
            echo $(varVersion)
            
  
              -------------

